#!/usr/bin/perl
#-*-perl-*-
#
# simple evaluation script to evaluate tree alignment output in
# Stockholm Tree Aligner format
#
# USAGE: eval_sta [OPTIONS] gold-file tree-alignments
#
# both files (gold-file & tree-alignments) 
# have to be in Stockholm Tree Aligner format!
#
# OPTIONS
#
# -b first-id ........ start evaluating at this sentence
# -e last-id ......... stop evaluating after this sentence
#
#
# If -b and -e are not given: all sentences that have at least one
# proposed link will be considered. 
# Problem: if the system doesn't suggest any links --> it will not be
#          considered and, therefore, the scores might be to high!
#---------------------------------------------------------------------
#

use strict;
use FindBin;
use lib $FindBin::Bin.'/../lib';
use Lingua::Align::Corpus::Parallel;

use vars qw($opt_b $opt_e $opt_g $opt_s);
use Getopt::Std;
getopts('b:e:g:s:');


my $gold=shift(@ARGV);

my $goldType=$opt_g || 'sta';
my $systemType=$opt_s || 'sta';

my $sta1=new Lingua::Align::Corpus::Parallel(-type => $goldType);
my $GoldLinks;
my $totalGold = $sta1->read_tree_alignments($gold,\$GoldLinks);

my $system=shift(@ARGV);
my $sta2=new Lingua::Align::Corpus::Parallel(-type => $systemType);
my $SystemLinks;
my $totalSystem = $sta2->read_tree_alignments($system,\$SystemLinks);

# keep a hash of source sentence IDs which we actually have aligned
# this is a it tricky because we will not count sentences for which the
# aligner didn't find any alignments ... hmmm ...

my %srcIDs=();
my $s_is_term;
my $t_is_term;

my ($correct,$wrong,$correctGood,$totalGood)= (0,0,0,0);

my %CorrectTypes=();
my %TotalSystemTypes=();
my $TotalSystem=0;

my $EvalThis=1;
if ($opt_b){$EvalThis=0;}

foreach my $s (keys %{$SystemLinks}){

    if ($s=~/^s?([0-9]+)\_/){          # check sentence IDs
	my $id=$1;
	if ($opt_b){                   # if start ID is given
	    next if ($id<$opt_b);      # --> skip the ones before
	}
	if ($opt_e){                   # if end ID given
	    next if ($id>$opt_e);      # skip the ones after
	}
	$srcIDs{$id}=1;                # otherwise: use all proposed links
    }


    if ($s=~/s?[0-9]+\_([0-9]+)$/){        # assume that node ID's < 500 
	if ($1 < 500){$s_is_term=1;}       # are terminal nodes
	else{$s_is_term=0;}
    }

    foreach my $t (keys %{$$SystemLinks{$s}}){

	if ($t=~/s?[0-9]+\_([0-9]+)$/){        # assume that node ID's < 500 
	    if ($1 < 500){$t_is_term=1;}       # are terminal nodes
	    else{$t_is_term=0;}
	}

	my $typeS = $$SystemLinks{$s}{$t};
	if ($typeS!~/(fuzzy|good)/){
	    if ($typeS>0.5){$typeS = 'good';}
	    else{$typeS = 'fuzzy';}
	}

	$TotalSystemTypes{$typeS}{$s_is_term}{$t_is_term}++;
	$TotalSystemTypes{ALL}{$s_is_term}{$t_is_term}++;
	$TotalSystem++;

	if (exists $$GoldLinks{$s}){
	    if (exists $$GoldLinks{$s}{$t}){

		my $typeG = $$GoldLinks{$s}{$t};

		$correct++;
		$CorrectTypes{ALL}{$s_is_term}{$t_is_term}++;
		if ($typeG eq 'good'){$correctGood++;}
		if ($typeS eq $typeG){
		    $CorrectTypes{$typeG}{$s_is_term}{$t_is_term}++;
		}
	    }
	}
    }
}


# go through gold standard links
# - we have to count good alignments
# - we might want to skip some sentences 
#   (which we haven't aligned with the system to be evaluated)

my %TotalGoldTypes=();
my $TotalGold=0;

foreach my $s (keys %{$GoldLinks}){

    if ($s=~/^s?([0-9]+)\_/){            # check sentence IDs in gold standard
	my $id=$1;
	if ($opt_b){                     # if start ID is given:
	    next if ($id<$opt_b);        # skip the ones before
	}
	if ($opt_e){                     # if end ID is given:
	    next if ($id>$opt_e);        # skip the ones after
	}
	if ((not $opt_b) && (not $opt_e)){     # otherwise: use all sentences
	    next if (not exists $srcIDs{$id}); # with at least 1 proposed link!
	}
	$srcIDs{$id}=1;
    }

    if ($s=~/s?[0-9]+\_([0-9]+)$/){        # assume that node ID's < 500 
	if ($1 < 500){$s_is_term=1;}       # are terminal nodes
	else{$s_is_term=0;}
    }

    foreach my $t (keys %{$$GoldLinks{$s}}){

	if ($t=~/s?[0-9]+\_([0-9]+)$/){        # assume that node ID's < 500 
	    if ($1 < 500){$t_is_term=1;}       # are terminal nodes
	    else{$t_is_term=0;}
	}

	$TotalGold++;
	$TotalGoldTypes{$$GoldLinks{$s}{$t}}{$s_is_term}{$t_is_term}++;
	$TotalGoldTypes{ALL}{$s_is_term}{$t_is_term}++;
	$totalGood++ if ($$GoldLinks{$s}{$t} eq 'good');
    }
}



if ($TotalGold != $totalGold){
    my $nrSent = scalar keys %srcIDs;
    print "\nTotal links in gold standard = $totalGold\n";
    print "I will only use $TotalGold links from $nrSent sentence pairs\n";
    print "for which we actually have alignments!\n\n";
}

#----------------------------------------------------------------
# print scores per type (T:T, NT:NT, all, good, fuzzy)

foreach my $type (sort keys %TotalGoldTypes){
    next if ($type eq 'comment');
    foreach my $s (sort keys %{$TotalGoldTypes{$type}}){
	foreach my $t (sort keys %{$TotalGoldTypes{$type}}){


	    ## only if there is anything to say ....
	    next if (not $CorrectTypes{$type}{$s}{$t});

	    print "--------------------------------------------------------\n";

	    my $precision=0;
	    if ($TotalSystemTypes{$type}{$s}{$t}){
		$precision = 
		    $CorrectTypes{$type}{$s}{$t}/
		    $TotalSystemTypes{$type}{$s}{$t};
	    }

	    my $recall=0;
	    if ($TotalGoldTypes{$type}{$s}{$t}){
		$recall = 
		    $CorrectTypes{$type}{$s}{$t}/
		    $TotalGoldTypes{$type}{$s}{$t};
	    }

	    my $st = 'NT';
	    if ($s){$st = 'T';}
	    my $tt = 'NT';
	    if ($t){$tt = 'T';}

	    printf "%30s = %5.2f (%d/%d)\n",
	    "precision ($type/$st:$tt)",
	    $precision*100,
	    $CorrectTypes{$type}{$s}{$t},
	    $TotalSystemTypes{$type}{$s}{$t};

	    printf "%30s = %5.2f (%d/%d)\n",
	    "recall ($type/$st:$tt)",
	    $recall*100,
	    $CorrectTypes{$type}{$s}{$t},
	    $TotalGoldTypes{$type}{$s}{$t};

	    my $F=0;
	    if ($recall || $precision){
		$F=2*$precision*$recall/($precision+$recall);
	    }
	    printf "%30s = %5.2f\n","balanced F ($type/$st:$tt)",100*$F;
	}
    }
}

print "\n\n";


#----------------------------------------------------------------
# print total numbers


if ($TotalGold && $TotalSystem){
    my $precision = $correct/$TotalSystem;
    my $recall = $correct/$TotalGold;
    my $recallGood = 0;
    my $recallFuzzy = 0;

    if ($totalGood){
	$recallGood = $correctGood/$totalGood;
    }
    if (($TotalGold - $totalGood) > 0){
	$recallFuzzy = ($correct - $correctGood)/($TotalGold - $totalGood);
    }

    print "=======================================\n";
    printf "  precision (all) = %5.2f (%d/%d)\n",
    $precision*100,$correct,$TotalSystem;
    printf "     recall (all) = %5.2f (%d/%d)\n",
    $recall*100,$correct,$TotalGold;
    printf "    recall (good) = %5.2f (%d/%d)\n",
    $recallGood*100,$correctGood,$totalGood;
    printf "   recall (fuzzy) = %5.2f (%d/%d)\n",
    $recallFuzzy*100,($correct - $correctGood),($TotalGold - $totalGood);
    print "=======================================\n";

    my $F = 0;
    if ($precision || $recall){
	$F = 2*$precision*$recall/($precision+$recall);
    }
    printf "F (P_all & R_all)  = %5.2f\n",100*$F;

    if ($precision || $recallGood){
	$F = 2*$precision*$recallGood/($precision+$recallGood);
    }
    printf "F (P_all & R_good) = %5.2f\n",100*$F;
    print "=======================================\n";
    
}



